[{"/home/inr-lab/arat_segmentation/segmentation-interface/src/index.js":"1","/home/inr-lab/arat_segmentation/segmentation-interface/src/App.js":"2","/home/inr-lab/arat_segmentation/segmentation-interface/src/reportWebVitals.js":"3","/home/inr-lab/arat_segmentation/segmentation-interface/src/components/PlayVideo/PlayVideoCopy.js":"4","/home/inr-lab/arat_segmentation/segmentation-interface/src/components/Video/Video.js":"5","/home/inr-lab/arat_segmentation/segmentation-interface/src/components/PlayBack/PlayBack.js":"6","/home/inr-lab/arat_segmentation/segmentation-interface/src/Home.js":"7"},{"size":775,"mtime":1668896352492,"results":"8","hashOfConfig":"9"},{"size":3034,"mtime":1683074965525,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1667512496463,"results":"11","hashOfConfig":"9"},{"size":30594,"mtime":1691100371641,"results":"12","hashOfConfig":"9"},{"size":2917,"mtime":1670186870275,"results":"13","hashOfConfig":"9"},{"size":7261,"mtime":1680755307121,"results":"14","hashOfConfig":"9"},{"size":3842,"mtime":1690761115669,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"17h3j0w",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/inr-lab/arat_segmentation/segmentation-interface/src/index.js",["42"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PlayBack } from './components/PlayBack/PlayBack';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <BrowserRouter>\n    <App />\n    {/* <PlayBack /> */}\n  </BrowserRouter>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/inr-lab/arat_segmentation/segmentation-interface/src/App.js",["43","44","45"],[],"/home/inr-lab/arat_segmentation/segmentation-interface/src/reportWebVitals.js",[],[],[],"/home/inr-lab/arat_segmentation/segmentation-interface/src/components/PlayVideo/PlayVideoCopy.js",["46","47","48","49"],[],"/home/inr-lab/arat_segmentation/segmentation-interface/src/components/Video/Video.js",["50","51","52","53","54","55"],[],"import { setSelectionRange } from '@testing-library/user-event/dist/utils';\nimport React, { Component } from 'react';\nimport VideoPlayer from 'react-video-player-extended';\n\nexport class Video extends Component {  \n    constructor(props) {\n      super(props);\n      this.state = {\n        url: this.props.url,\n        isPlaying: this.props.isPlaying,\n        timeStart: this.props.timeStart,\n        currentTime: undefined,\n        duration: undefined\n      };\n    }\n    handleProgress = (e) => {\n      this.setState({currentTime: e.target.currentTime});\n      this.props.sendTime(this.state.currentTime);\n    } \n    handleDuration = (duration) => {\n      this.setState({duration: duration});\n    }\n    render() { \n        var { \n            url, \n            isPlaying,\n            timeStart,\n            duration,\n            currentTime\n          } = this.state;\n        var fps=30;\n        const controls = ['Play', 'Time', 'Progress', 'NextFrame', 'LastFrame', 'FullScreen'];\n        document.onkeydown = checkKey;\n\n        function checkKey(e) {\n\n            e = e || window.event;\n\n            if (e.keyCode == '37') {\n              // left arrow\n              document.getElementsByClassName(\"react-video-player\")[0].currentTime = document.getElementsByClassName(\"react-video-player\")[0].currentTime - 1/30;\n            }\n            else if (e.keyCode == '39') {\n              // right arrow\n              if (document.getElementsByClassName(\"react-video-player\")[0].currentTime >= 1/30 ){\n                document.getElementsByClassName(\"react-video-player\")[0].currentTime = document.getElementsByClassName(\"react-video-player\")[0].currentTime + 1/30;\n              }\n                \n            }\n            else if (e.keyCode == '32'){\n              if (document.getElementsByClassName(\"react-video-player\")[0].isPlaying){\n                document.getElementsByClassName(\"react-video-player\")[0].isPlaying = false;\n              }\n              else{\n                document.getElementsByClassName(\"react-video-player\")[0].isPlaying = true;\n              }\n            }\n\n        }\n        return (\n            <div>\n                <VideoPlayer\n                    url={url}\n                    controls={controls}\n                    isPlaying={isPlaying}\n                    loop={false}\n                    height={'auto'}\n                    width={'100%'}\n                    timeStart={timeStart}\n                    onPlay={()=>{this.setState({isPlaying: true})}}\n                    onPause={()=>{this.setState({isPlaying: false})}}\n                    onProgress={(e)=>{\n                      this.handleProgress(e);\n                    }}\n                    onDuration={(duration)=>{this.handleDuration(duration)}}\n                    onVideoPlayingComplete={()=>{this.setState({isPlaying: false})}}\n                    fps={fps}\n                  />\n            </div>\n        );\n    }\n}\n",[],"/home/inr-lab/arat_segmentation/segmentation-interface/src/components/PlayBack/PlayBack.js",["56"],[],"import React, { Component } from 'react';\nimport './PlayBack.css';\nimport { AiOutlineClose, AiOutlineFullscreenExit } from \"react-icons/ai/\";\n\n\nexport class PlayBack extends Component {  \n    constructor(props) {\n      super(props);\n      this.state = {\n        url: \"./Videos/\"+this.props.url,\n        showPlayBack: this.props.values.showPlayBack,\n        // startFrame: this.props.startFrame,\n        // endFrame: this.props.endFrame,\n        // bars: this.props.bars,\n        // activeImageIndex: this.props.activeImageIndex,\n        // frames: this.props.frames,\n        // test: this.props.test,\n        // notCalled: this.props.notCalled,\n        // loaded: this.props.loaded,\n        startFrame: this.props.values.start,\n        endFrame: this.props.values.end,\n        bars: this.props.values.bars,\n        activeImageIndex: this.props.values.activeImageIndex,\n        frames: this.props.values.frames,\n        test: this.props.values.test,\n        notCalled: this.props.values.notCalled,\n        loaded: this.props.values.loaded,\n        stop: false\n      };\n    }\n    reset = () => {\n      this.setState({activeImageIndex: 0});\n      this.setState({bars: []});\n      this.setState({frames: []});\n      this.setState({test: 1});\n      this.setState({notCalled: true});\n      this.setState({loaded: false});\n      \n    }\n    closePlayback = () => {\n      this.setState({showPlayBack: false});\n      this.props.sendPlay(this.state.showPlayBack);\n      this.reset();\n      \n      \n    }\n\n    getVideoImage = (path, secs, callback) =>{\n      var me = this, video = document.createElement('video');\n      video.onloadedmetadata = function() {\n        if ('function' === typeof secs) {\n          secs = secs(this.duration);\n        }\n        this.currentTime = Math.min(Math.max(0, (secs < 0 ? this.duration : 0) + secs), this.duration);\n      };\n      video.onseeked = function(e) {\n        var canvas = document.createElement('canvas');\n        canvas.height = video.videoHeight/2;\n        canvas.width = video.videoWidth/2;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        var img = new Image();\n        img.src = canvas.toDataURL();\n        callback.call(me, img, this.currentTime, e);\n      };\n      video.onerror = function(e) {\n        callback.call(me, undefined, undefined, e);\n      };\n      video.src = path;\n    }\n    showImageAt = (frame) => {\n      if (this.state.showPlayBack){\n      var startSec = frame/30;\n      this.getVideoImage(\n        this.state.url,\n        startSec,\n        function(img, startSec, event) {\n          if (event.type === 'seeked') {\n              this.state.bars.push(img);\n              this.state.frames.push(frame);\n              if (document.getElementById(\"img\")) {\n                document.getElementById(\"img\").innerHTML=\"Still Loading... Frame: \" + frame;\n                document.getElementById(\"img\").appendChild(img);\n              }\n              if (this.state.endFrame >= ++frame) {\n                this.showImageAt(frame);\n              }\n              else {\n                return;\n              }\n          }\n          }\n      );\n      }\n      else this.closePlayback();\n    }\n    \n    componentDidMount(){\n      if (this.state.showPlayBack){\n        if (document.getElementById(\"btn\")) {\n          document.getElementById(\"btn\").style.display=\"none\";\n        }\n        // enter component did mount for the first time\n        if (this.state.notCalled){\n          this.reset();\n          // loading image\n          var frame = this.state.startFrame;\n          this.showImageAt(frame);\n          // set it to prevent reloading of the images\n          this.setState({notCalled: false});\n        }\n        var interval = undefined;\n        var wait = undefined;\n        // if all the images are loaded\n        if (this.state.bars.length === this.state.endFrame - this.state.startFrame+1){\n          // set a new interval to show the images at the rate of 50 micro sec per image\n          interval = setInterval(()=>{\n            if (this.state.showPlayBack){\n              if (this.state.activeImageIndex+1===this.state.bars.length){\n                // this.setState({activeImageIndex: 0});\n                if (document.getElementById(\"btn\")) {\n                  document.getElementById(\"btn\").style.display=\"block\";\n                }\n                // exit component did mount\n                clearInterval(interval);\n              }\n              // show the image and the frame \n              if (document.getElementById(\"img\")) {\n                document.getElementById(\"img\").innerHTML=\"Frame: \" + this.state.frames[this.state.activeImageIndex];\n                document.getElementById(\"img\").appendChild(this.state.bars[this.state.activeImageIndex]);\n              }\n              // update the index of the image and the frame in their arrays\n              let newActiveIndex = this.state.activeImageIndex+1     \n              this.setState({\n                activeImageIndex: newActiveIndex\n              })\n            }\n            else {\n              this.closePlayback();\n              clearInterval(interval);\n            }\n            // if all images are displayed, show the replay button\n            \n          }, 50);\n        }\n        else {\n          // if we haven't finished loading all images, we wait \n          \n          wait = setInterval(()=>{\n            if (this.state.showPlayBack){\n              // exit wait and show images\n              if (this.state.bars.length === this.state.endFrame - this.state.startFrame + 1) {\n                \n                if (this.state.loaded === false) {\n                  this.setState({loaded: true});\n                  this.setState({activeImageIndex: 0});\n                  this.componentDidMount();\n                  clearInterval(wait);\n                }\n                else {\n                  clearInterval(wait);\n                }\n              }\n              else if (this.state.bars.length > this.state.endFrame - this.state.startFrame + 1){\n                clearInterval(wait);\n              }\n              else if (this.state.loaded) {\n                clearInterval(wait);\n              }\n              // continue wait\n              else{\n                let test = this.state.test;\n                this.setState({\n                  test: test+1\n                })\n              }\n            }\n            else {\n              this.closePlayback();\n              clearInterval(wait);\n            }\n            \n              \n          }, 2000);\n        }\n      }\n      else {\n        this.closePlayback();\n      }\n      \n    }\n   \n    render() { \n        return (\n            <div className='container'>\n                <div className=\"d-flex flex-row-reverse\" onClick={this.closePlayback}><AiOutlineClose/></div>\n                <div id=\"img\">\n                </div> \n                <div>\n                  <button \n                    id=\"btn\"\n                    onClick={(() => {\n                      this.setState({activeImageIndex: 0});\n                      this.componentDidMount();\n                    })}>\n                    Replay\n                  </button>\n                </div>\n               \n            </div>\n        );\n    }\n}\n","/home/inr-lab/arat_segmentation/segmentation-interface/src/Home.js",["57","58","59","60","61"],[],{"ruleId":"62","severity":1,"message":"63","line":8,"column":10,"nodeType":"64","messageId":"65","endLine":8,"endColumn":18},{"ruleId":"62","severity":1,"message":"66","line":5,"column":10,"nodeType":"64","messageId":"65","endLine":5,"endColumn":24},{"ruleId":"62","severity":1,"message":"67","line":54,"column":14,"nodeType":"64","messageId":"65","endLine":54,"endColumn":19},{"ruleId":"62","severity":1,"message":"68","line":57,"column":14,"nodeType":"64","messageId":"65","endLine":57,"endColumn":21},{"ruleId":"69","severity":1,"message":"70","line":133,"column":13,"nodeType":"64","messageId":"71","endLine":133,"endColumn":20},{"ruleId":"62","severity":1,"message":"72","line":225,"column":7,"nodeType":"64","messageId":"65","endLine":225,"endColumn":29},{"ruleId":"62","severity":1,"message":"73","line":226,"column":7,"nodeType":"64","messageId":"65","endLine":226,"endColumn":31},{"ruleId":"62","severity":1,"message":"74","line":235,"column":7,"nodeType":"64","messageId":"65","endLine":235,"endColumn":18},{"ruleId":"62","severity":1,"message":"75","line":1,"column":10,"nodeType":"64","messageId":"65","endLine":1,"endColumn":27},{"ruleId":"62","severity":1,"message":"76","line":28,"column":13,"nodeType":"64","messageId":"65","endLine":28,"endColumn":21},{"ruleId":"62","severity":1,"message":"77","line":29,"column":13,"nodeType":"64","messageId":"65","endLine":29,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":39,"column":27,"nodeType":"80","messageId":"81","endLine":39,"endColumn":29},{"ruleId":"78","severity":1,"message":"79","line":43,"column":32,"nodeType":"80","messageId":"81","endLine":43,"endColumn":34},{"ruleId":"78","severity":1,"message":"79","line":50,"column":32,"nodeType":"80","messageId":"81","endLine":50,"endColumn":34},{"ruleId":"62","severity":1,"message":"82","line":3,"column":26,"nodeType":"64","messageId":"65","endLine":3,"endColumn":49},{"ruleId":"62","severity":1,"message":"83","line":6,"column":10,"nodeType":"64","messageId":"65","endLine":6,"endColumn":23},{"ruleId":"62","severity":1,"message":"84","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":15},{"ruleId":"62","severity":1,"message":"85","line":7,"column":17,"nodeType":"64","messageId":"65","endLine":7,"endColumn":23},{"ruleId":"62","severity":1,"message":"67","line":35,"column":14,"nodeType":"64","messageId":"65","endLine":35,"endColumn":19},{"ruleId":"62","severity":1,"message":"68","line":38,"column":14,"nodeType":"64","messageId":"65","endLine":38,"endColumn":21},"no-unused-vars","'PlayBack' is defined but never used.","Identifier","unusedVar","'AiOutlineCheck' is defined but never used.","'navTo' is defined but never used.","'navBack' is defined but never used.","no-redeclare","'Segment' is already defined.","redeclared","'PatientTaskHandMapping' is assigned a value but never used.","'PatientTaskHandMappingId' is assigned a value but never used.","'IsSubmitted' is assigned a value but never used.","'setSelectionRange' is defined but never used.","'duration' is assigned a value but never used.","'currentTime' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'AiOutlineFullscreenExit' is defined but never used.","'PlayVideoCopy' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used."]